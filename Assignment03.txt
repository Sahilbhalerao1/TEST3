Assignment 3
Q1]
=>def three_sum_closest(nums, target):
    nums.sort()
    n = len(nums)
    closest_sum = float('inf')

    for i in range(n - 2):
        left, right = i + 1, n - 1

        while left < right:
            current_sum = nums[i] + nums[left] + nums[right]

            if current_sum == target:
                return target

            if abs(current_sum - target) < abs(closest_sum - target):
                closest_sum = current_sum

            if current_sum < target:
                left += 1
            else:
                right -= 1

    return closest_sum
nums = [-1, 2, 1, -4]
target = 1
result = three_sum_closest(nums, target)
print(result)  

2]
=>def four_sum(nums, target):
    nums.sort()
    n = len(nums)
    result = []

    for i in range(n - 3):
        if i > 0 and nums[i] == nums[i - 1]:
            continue

        for j in range(i + 1, n - 2):
            if j > i + 1 and nums[j] == nums[j - 1]:
                continue

            left, right = j + 1, n - 1

            while left < right:
                current_sum = nums[i] + nums[j] + nums[left] + nums[right]

                if current_sum == target:
                    result.append([nums[i], nums[j], nums[left], nums[right]])
                    while left < right and nums[left] == nums[left + 1]:
                        left += 1
                    while left < right and nums[right] == nums[right - 1]:
                        right -= 1
                    left += 1
                    right -= 1

                elif current_sum < target:
                    left += 1
                else:
                    right -= 1

    return result


nums = [1, 0, -1, 0, -2, 2]
target = 0
result = four_sum(nums, target)
print(result)  

3]
=>def next_permutation(nums):
    n = len(nums)
    i = n - 2

    # Find the first index i where nums[i] < nums[i+1]
    while i >= 0 and nums[i] >= nums[i + 1]:
        i -= 1

    if i >= 0:
        j = n - 1
        # Find the first index j where nums[j] > nums[i]
        while j >= 0 and nums[j] <= nums[i]:
            j -= 1
        nums[i], nums[j] = nums[j], nums[i]

    # Reverse the subarray from index i+1 to the end of the array
    left, right = i + 1, n - 1
    while left < right:
        nums[left], nums[right] = nums[right], nums[left]
        left += 1
        right -= 1

nums = [1, 2, 3]
next_permutation(nums)
print(nums)  

4]
=>def search_insert(nums, target):
    left, right = 0, len(nums) - 1

    while left <= right:
        mid = left + (right - left) // 2

        if nums[mid] == target:
            return mid
        elif nums[mid] < target:
            left = mid + 1
        else:
            right = mid - 1

    return left
nums = [1, 3, 5, 6]
target = 5
result = search_insert(nums, target)
print(result)  

 5]
=>def increment_digits(digits):
    n = len(digits)
    carry = 1  # Start with a carry of 1 to increment by one

    for i in range(n - 1, -1, -1):
        current_sum = digits[i] + carry
        digits[i] = current_sum % 10
        carry = current_sum // 10

    # If there's still a carry after the loop, we need to insert it at the beginning
    if carry:
        digits.insert(0, carry)

    return digits
digits = [1, 2, 3]
result = increment_digits(digits)
print(result) 

6]
=>def find_single_element(nums):
    result = 0

    for num in nums:
        result ^= num

    return result

# Example usage:
nums = [2, 2, 1]
result = find_single_element(nums)
print(result)  # Output: 1

8]
=>def can_attend_all_meetings(intervals):
    intervals.sort(key=lambda x: x[0])  # Sort the intervals based on start times

    for i in range(1, len(intervals)):
        if intervals[i-1][1] > intervals[i][0]:
            return False

    return True

# Example usage:
intervals = [[0, 30], [5, 10], [15, 20]]
result = can_attend_all_meetings(intervals)
print(result)  # Output: False
